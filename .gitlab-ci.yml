# 

image: eclipse-temurin:17-jdk-jammy

variables:

  # ANDROID_COMPILE_SDK is the version of Android you're compiling with.
  # It should match compileSdkVersion.
  ANDROID_COMPILE_SDK: "34"

  # ANDROID_BUILD_TOOLS is the version of the Android build tools you are using.
  # It should match buildToolsVersion.
  ANDROID_BUILD_TOOLS: "30.0.2"

  # It's what version of the command line tools we're going to download from the official site.
  # Official Site-> https://developer.android.com/studio/index.html
  # There, look down below at the cli tools only, sdk tools package is of format:
  #        commandlinetools-os_type-ANDROID_SDK_TOOLS_latest.zip
  # when the script was last modified for latest compileSdkVersion, it was which is written down below
  ANDROID_SDK_TOOLS: "10406996"

cache:
  - key: android-home
    paths:
      - android-home
  - key: gradle-cache-key
    paths:
      - $HOME/.gradle/wrapper/dists
      - .gradle/wrapper
      - .gradle/caches
  - key: "doris_db$CI_COMMIT_REF_SLUG"
    paths:
      - DorisAndroidPrefetch/run


stages:          # List of stages for jobs, and their order of execution
  - prepare_data
  - build
  - publish
  - release

# cf. https://stackoverflow.com/questions/33940384/gitlab-8-2-1-how-to-use-cache-in-gitlab-ci-yml/35478988#35478988
before_script:
  - export GRADLE_USER_HOME=`pwd`/.gradle


# Packages installation before running script
#before_script:
# Define some reusable functions
.install-android-sdk: &install-android-sdk
  # TODO transform into a docker image instead of download on every build
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes wget tar unzip lib32stdc++6 lib32z1

  # Setup path as android_home for moving/exporting the downloaded sdk into it
  - export ANDROID_HOME="${PWD}/android-home"
  # Create a new directory at specified location
  - install -d $ANDROID_HOME
  # Here we are installing androidSDK tools from official source,
  # (the key thing here is the url from where you are downloading these sdk tool for command line, so please do note this url pattern there and here as well)
  # after that unzipping those tools and
  # then running a series of SDK manager commands to install necessary android SDK packages that'll allow the app to build
  - |
    if [[ ! -d $ANDROID_HOME/cmdline-tools/${ANDROID_SDK_TOOLS} ]]
    then
      wget --output-document=$ANDROID_HOME/cmdline-tools.zip https://dl.google.com/android/repository/commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest.zip
      # move to the archive at ANDROID_HOME
      pushd $ANDROID_HOME
      unzip -d cmdline-tools cmdline-tools.zip
      mv cmdline-tools/cmdline-tools cmdline-tools/$ANDROID_SDK_TOOLS
      ln -s ${ANDROID_HOME}/cmdline-tools/$ANDROID_SDK_TOOLS ${ANDROID_HOME}/cmdline-tools/latest
      popd
    else
      echo "commandlinetools-linux-${ANDROID_SDK_TOOLS}_latest already installed"
    fi
  - export PATH=$PATH:${ANDROID_HOME}/cmdline-tools/latest/bin/

  # Nothing fancy here, just checking sdkManager version
  - sdkmanager --version

  # use yes to accept all licenses
  - yes | sdkmanager --sdk_root=${ANDROID_HOME} --licenses || true
  - sdkmanager --sdk_root=${ANDROID_HOME} "platforms;android-${ANDROID_COMPILE_SDK}"
  - sdkmanager --sdk_root=${ANDROID_HOME} "platform-tools"
  - sdkmanager --sdk_root=${ANDROID_HOME} "build-tools;${ANDROID_BUILD_TOOLS}"

  # Not necessary, but just for surity
  - chmod +x ./gradlew

.create_sign_info: &create-sign-info
  - pwd
  - mkdir -p /builds/keystore
  - echo "$DORISANDROID_KEYSTORE" | base64 -d > /builds/keystore/doris_android.keystore
  - echo "keyAlias=doris" > /builds/keystore/sign.properties
  - echo "storePassword=$KEYSTORE_PASSWORD" >>  /builds/keystore/sign.properties
  - echo "storeFile=/builds/keystore/doris_android.keystore" >> /builds/keystore/sign.properties
  - echo "keyPassword=$KEY_PASSWORD" >> /builds/keystore/sign.properties


.show_cache_content: &show_cache_content
  - set +e
  - apt-get --quiet update --yes
  - apt-get --quiet install --yes sqlite3
  - pwd
  - ls -lsa DorisAndroidPrefetch/run
  - ls -lsa DorisAndroidPrefetch/run/database
  - |
    if [ -f DorisAndroidPrefetch/run/database/DorisAndroid.db ]; then
      sqlite3 DorisAndroidPrefetch/run/database/DorisAndroid.db ".tables"
      sqlite3 DorisAndroidPrefetch/run/database/DorisAndroid.db "SELECT * FROM dorisDB_metadata;"
    fi
  - ls -lsa .gradle
  - set -e

collect-db-job:
  stage: prepare_data
  resource_group: doris_web_site_and_cache
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - *show_cache_content
    - cat /builds/keystore/sign.properties || true
  script:
    - echo "Get DB from doris web site"
    - ./gradlew buildDorisDB -Pargs="-u $DORIS_SITE_USER_ID --token=$DORIS_SITE_ACCESS_TOKEN"
  after_script:
    - *show_cache_content
  allow_failure: false
  artifacts:
    when: always
    paths:
      - DorisAndroidPrefetch/run/

build-job:
  stage: build
  needs:
    - collect-db-job
  resource_group: doris_web_site_and_cache
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - *show_cache_content
    - *install-android-sdk
    - *create-sign-info
  script:
    - |
      if [ -f DorisAndroidPrefetch/run/database/DorisAndroid.db ]; then
        echo "use of the latest DB collected for the apk cp  DorisAndroidPrefetch/run/database/*.db DorisAndroid/src/main/assets"
        cp  DorisAndroidPrefetch/run/database/*.db DorisAndroid/src/main/assets
      else
        echo "use DorisAndroid/src/main/assets/DorisAndroid.db stored in git"
      fi
      echo "DB version"
      sqlite3 DorisAndroid/src/main/assets/DorisAndroid.db "SELECT * FROM dorisDB_metadata;"
    - ./gradlew clean build lint
  after_script:
    - *show_cache_content
  artifacts:
    paths:
      - DorisAndroid/build/outputs/apk/**/*.apk
      - DorisAndroid/build/reports/
    #reports:
    #  junit: DorisAndroid/build/reports/*.xml

publish_in_generic_registry:
  stage: publish
  image: alpine:3.18
  needs:
    - build-job
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+.\d+.\d+-?.*$/                # Run this job when a tag is created and tag name looks like a version
  before_script:
    - apk add curl
  script:
    # upload apk and database in package registry for archive
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file DorisAndroid/build/outputs/apk/release/DorisAndroid-release.apk "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/apk/${CI_COMMIT_TAG}/DorisAndroid.apk"'
    - 'curl --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file DorisAndroidPrefetch/run/database/DorisAndroid.db "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/database/${CI_COMMIT_TAG}/DorisAndroid.db"'

create_release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - publish_in_generic_registry
  rules:
    - if: $CI_COMMIT_TAG =~ /^\d+.\d+.\d+-?.*$/                # Run this job when a tag is created and tag name looks like a version
  script:
    - echo "running release_job"
  release:                                                    # See https://docs.gitlab.com/ee/ci/yaml/#release for available properties
    tag_name: '$CI_COMMIT_TAG'
    name: '$CI_COMMIT_TAG'
    description: '$CI_COMMIT_TAG_MESSAGE'                     # Uses the commit tag message as default release description
    assets:
      links:                                                  # add a link to the archive in the generic package registry
        - name: DorisAndroid.apk
          url: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/apk/${CI_COMMIT_TAG}/DorisAndroid.apk
        - name: DorisAndroid.db
          url: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/database/${CI_COMMIT_TAG}/DorisAndroid.db

