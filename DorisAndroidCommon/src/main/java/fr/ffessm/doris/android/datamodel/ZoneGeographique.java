/* *********************************************************************
 * Licence CeCILL-B
 * *********************************************************************
 * Copyright (c) 2012-2017 - FFESSM
 * Auteurs : Guillaume Moynard <gmo7942@gmail.com>
 *           Didier Vojtisek <dvojtise@gmail.com>
 * *********************************************************************

Ce logiciel est un programme informatique servant à afficher de manière 
ergonomique sur un terminal Android les fiches du site : doris.ffessm.fr. 

Les images, logos et textes restent la propriété de leurs auteurs, cf. : 
doris.ffessm.fr.

Ce logiciel est régi par la licence CeCILL-B soumise au droit français et
respectant les principes de diffusion des logiciels libres. Vous pouvez
utiliser, modifier et/ou redistribuer ce programme sous les conditions
de la licence CeCILL-B telle que diffusée par le CEA, le CNRS et l'INRIA 
sur le site "http://www.cecill.info".

En contrepartie de l'accessibilité au code source et des droits de copie,
de modification et de redistribution accordés par cette licence, il n'est
offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
seule une responsabilité restreinte pèse sur l'auteur du programme,  le
titulaire des droits patrimoniaux et les concédants successifs.

A cet égard  l'attention de l'utilisateur est attirée sur les risques
associés au chargement,  à l'utilisation,  à la modification et/ou au
développement et à la reproduction du logiciel par l'utilisateur étant 
donné sa spécificité de logiciel libre, qui peut le rendre complexe à 
manipuler et qui le réserve donc à des développeurs et des professionnels
avertis possédant  des  connaissances  informatiques approfondies.  Les
utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
logiciel à leurs besoins dans des conditions permettant d'assurer la
sécurité de leurs systèmes et ou de leurs données et, plus généralement, 
à l'utiliser et l'exploiter dans les mêmes conditions de sécurité. 

Le fait que vous puissiez accéder à cet en-tête signifie que vous avez 
pris connaissance de la licence CeCILL-B, et que vous en avez accepté les
termes.
* ********************************************************************* */
package fr.ffessm.doris.android.datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.SelectArg;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import fr.ffessm.doris.android.datamodel.associations.*;

// Start of user code additional import for ZoneGeographique
import fr.ffessm.doris.android.sitedoris.Constants.ZoneGeographiqueKind;

import static fr.ffessm.doris.android.sitedoris.Constants.ZONE_GEOGRAPHIQUE_TOUTES_ZONES_DESCR;
// End of user code

/** 
  *  
  */ 
@DatabaseTable(tableName = "zoneGeographique")
public class ZoneGeographique {

	public static Log log = LogFactory.getLog(ZoneGeographique.class);

	public static final String XML_ZONEGEOGRAPHIQUE = "ZONEGEOGRAPHIQUE";
	public static final String XML_ATT_ID = "id";
	public static final String XML_ATT_NOM = "nom";
	public static final String XML_ATT_DESCRIPTION = "description";
	public static final String XML_REF_FICHES = "fiches";
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;

	/**
     * dbHelper used to autorefresh values and doing queries
     * must be set other wise most getter will return proxy that will need to be refreshed
	 */
	protected DorisDBHelper _contextDB = null;

	/**
	 * object created from DB may need to be updated from the DB for being fully navigable
	 */
	public boolean parentZoneGeographique_mayNeedDBRefresh = true;

	/** TEST GM : SQLite = SQLite **/
	@DatabaseField
	protected java.lang.String nom;

	/** TEST GM : SQLite = SQLite **/
	@DatabaseField
	protected java.lang.String description;

	/**
	 *  id in the doris web site
	 */
	@DatabaseField
	protected int idDoris;


	/** Permet de créer ou lire l'arborescence */
	@ForeignCollectionField(eager = false, foreignFieldName = "parentZoneGeographique")
	protected ForeignCollection<ZoneGeographique> subZonesGeographiques;

	@DatabaseField(foreign = true)
	protected ZoneGeographique parentZoneGeographique;


	// work in progress, find association 
	// Association many to many Fiches_ZonesGeographiques
	@ForeignCollectionField(eager = false, foreignFieldName = "zoneGeographique")	
	protected ForeignCollection<Fiches_ZonesGeographiques> fiches_ZonesGeographiques;

	/**  
	  * Attention, returned list is readonly
      */
	public List<Fiche> getFiches(){
		List<Fiche> result = new ArrayList<>();
		
		for (Fiches_ZonesGeographiques aFiches_ZonesGeographiques : fiches_ZonesGeographiques) {
			if(_contextDB != null) aFiches_ZonesGeographiques.setContextDB(_contextDB);
			result.add(aFiches_ZonesGeographiques.getFiche());
		}
		return result;
	}
	public void addFiche(Fiche fiche){
		try {
			_contextDB.fiches_ZonesGeographiquesDao.create(new Fiches_ZonesGeographiques( this, fiche));
		} catch (SQLException e) {
			log.error("Pb while adding association fiches_ZonesGeographiques",e);
		}
	}

	public List<ZoneGeographique> getZoneGeographicChilds(){
		List<ZoneGeographique> result = new ArrayList<>();
		log.info("getZoneGeographicChilds "+this.nom + " " + this.getSubZonesGeographiques());
		for (ZoneGeographique sub_ZonesGeographiques : subZonesGeographiques) {
			if(_contextDB != null) sub_ZonesGeographiques.setContextDB(_contextDB);
			result.add(sub_ZonesGeographiques);
		}
		return result;
	}
	// end work in progress 	

	public Collection<ZoneGeographique> getSubZonesGeographiques() {
		return this.subZonesGeographiques;
	}
	public ZoneGeographique getParentZoneGeographique() {
		try {
			if(parentZoneGeographique_mayNeedDBRefresh && _contextDB != null){
				_contextDB.zoneGeographiqueDao.refresh(this.parentZoneGeographique);
				parentZoneGeographique_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error("erreur dans getParentZoneGeographique()");
			log.error(e.getMessage(),e);
		}
		if(_contextDB==null && this.parentZoneGeographique == null){
			log.warn("ZoneGeographique may not be properly refreshed from DB (_id="+_id+")");
		}

		return this.parentZoneGeographique;
	}
	public void setGroupePere(ZoneGeographique parentZoneGeographique) {
		this.parentZoneGeographique = parentZoneGeographique;
	}
				

	// Start of user code ZoneGeographique additional user properties

	public ZoneGeographique(ZoneGeographiqueKind zoneGeoKind) {
		switch (zoneGeoKind) {
	   	case FAUNE_FLORE_TOUTES_ZONES:
	   		this._id = -1;
	   		break;
	   	case FAUNE_FLORE_MARINES_FRANCE_METROPOLITAINE:
	   		this._id = 1;
	   		break;
		case FAUNE_FLORE_FACADE_ATLANTIQUE_FRANCAISE:
			this._id = 2;
			break;
		case FAUNE_FLORE_MEDITERRANEE_FRANCAISE:
			this._id = 	3;
			break;
		case FAUNE_FLORE_DULCICOLES_FRANCE_METROPOLITAINE:
			this._id = 4;
			break;
		case FAUNE_FLORE_DULCICOLES_ATLANTIQUE_NORD_OUEST:
			this._id = 5;
			break;
		case FAUNE_FLORE_MARINES_DULCICOLES_INDO_PACIFIQUE:
			this._id = 6;
			break;
		case FAUNE_FLORE_TERRES_ANTARCTIQUES_FRANCAISES:
			this._id = 7;
			break;
		case FAUNE_FLORE_MER_ROUGE:
			this._id = 	8;
			break;
		case FAUNE_FLORE_SUBAQUATIQUES_CARAIBES:
			this._id = 9;
			break;
		case FAUNE_FLORE_GUYANNE:
			this._id = 10;
			break;
		case FAUNE_FLORE_HABITAT:
			this._id = 11;
			break;
		}
	}

	// Cas Spécifique de la Zone "Toutes Zones"
	public void setToutesZones(){
		this._id = -1;
		this.nom = ZONE_GEOGRAPHIQUE_TOUTES_ZONES_DESCR;
	}

	public ZoneGeographiqueKind getZoneGeoKind() {
	   	switch (_id) {
	   	case -1:
    		return ZoneGeographiqueKind.FAUNE_FLORE_TOUTES_ZONES;
	   	case 1:
    		return ZoneGeographiqueKind.FAUNE_FLORE_MARINES_FRANCE_METROPOLITAINE;
		case 2:
			return ZoneGeographiqueKind.FAUNE_FLORE_FACADE_ATLANTIQUE_FRANCAISE;
		case 3:
			return ZoneGeographiqueKind.FAUNE_FLORE_MEDITERRANEE_FRANCAISE;
		case 4:
			return ZoneGeographiqueKind.FAUNE_FLORE_DULCICOLES_FRANCE_METROPOLITAINE;
		case 5:
			return ZoneGeographiqueKind.FAUNE_FLORE_DULCICOLES_ATLANTIQUE_NORD_OUEST;
		case 6:
			return ZoneGeographiqueKind.FAUNE_FLORE_MARINES_DULCICOLES_INDO_PACIFIQUE;
		case 7:
			return ZoneGeographiqueKind.FAUNE_FLORE_TERRES_ANTARCTIQUES_FRANCAISES;
		case 8:
			return ZoneGeographiqueKind.FAUNE_FLORE_MER_ROUGE;
		case 9:
			return ZoneGeographiqueKind.FAUNE_FLORE_SUBAQUATIQUES_CARAIBES;
		case 10:
			return ZoneGeographiqueKind.FAUNE_FLORE_GUYANNE;
		case 11:
			return ZoneGeographiqueKind.FAUNE_FLORE_HABITAT;
		default:
			return null;
		}
	}

	// End of user code
	
	public ZoneGeographique() {} // needed by ormlite
	public ZoneGeographique(java.lang.String nom, java.lang.String description) {
		super();
		this.nom = nom;
		this.description = description;
	}
    public ZoneGeographique(int id, java.lang.String nom, java.lang.String description, int idDoris) {
        super();
        this._id = id;
        this.nom = nom;
        this.description = description;
		this.idDoris = idDoris;
    }
	public ZoneGeographique(int id, java.lang.String nom, java.lang.String description, int idDoris, ZoneGeographique parentZoneGeographique) {
		super();
		this._id = id;
		this.nom = nom;
		this.description = description;
		this.idDoris = idDoris;
		this.parentZoneGeographique = parentZoneGeographique;
	}

	public int getId() {
		return _id;
	}
	public void setId(int id) {
		this._id = id;
	}

	public DorisDBHelper getContextDB(){
		return _contextDB;
	}
	public void setContextDB(DorisDBHelper contextDB){
		this._contextDB = contextDB;
	}

	public java.lang.String getNom() {
		return this.nom;
	}
	public void setNom(java.lang.String nom) {
		this.nom = nom;
	}
	public java.lang.String getDescription() {
		return this.description;
	}
	public void setDescription(java.lang.String description) {
		this.description = description;
	}

	public int getIdDoris() {
		return this.idDoris;
	}
	public void setIdDoris(int idDoris) {
		this.idDoris = idDoris;
	}



	public String toXML(String indent, DorisDBHelper contextDB){
		StringBuilder sb = new StringBuilder();
		sb.append(indent+"<");
    	sb.append(XML_ZONEGEOGRAPHIQUE);
		sb.append(" "+XML_ATT_ID+"=\"");
		sb.append(this._id);
    	sb.append("\" ");
    	sb.append(">");

		sb.append("\n"+indent+"\t<"+XML_ATT_NOM+">");
		sb.append(StringEscapeUtils.escapeXml(this.nom));
    	sb.append("</"+XML_ATT_NOM+">");
		sb.append("\n"+indent+"\t<"+XML_ATT_DESCRIPTION+">");
		sb.append(StringEscapeUtils.escapeXml(this.description));
    	sb.append("</"+XML_ATT_DESCRIPTION+">");

		
		for(Fiche ref : this.getFiches()){
    		sb.append("\n"+indent+"\t<"+XML_REF_FICHES+" id=\"");
    		sb.append(ref._id);
        	sb.append("\"/>");
			
    	}
			
		// TODO deal with other case

		sb.append("</"+XML_ZONEGEOGRAPHIQUE+">");
		return sb.toString();
	}
}
