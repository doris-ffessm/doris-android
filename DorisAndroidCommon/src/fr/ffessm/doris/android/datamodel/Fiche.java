/* *********************************************************************
 * Licence CeCILL-B
 * *********************************************************************
 * Copyright (c) 2012-2013 - FFESSM
 * Auteurs : Guillaume Mo <gmo7942@gmail.com>
 *           Didier Vojtisek <dvojtise@gmail.com>
 * *********************************************************************

Ce logiciel est un programme informatique servant à afficher de manière 
ergonomique sur un terminal Android les fiches du site : doris.ffessm.fr. 

Les images, logos et textes restent la propriété de leurs auteurs, cf. : 
doris.ffessm.fr.

Ce logiciel est régi par la licence CeCILL-B soumise au droit français et
respectant les principes de diffusion des logiciels libres. Vous pouvez
utiliser, modifier et/ou redistribuer ce programme sous les conditions
de la licence CeCILL-B telle que diffusée par le CEA, le CNRS et l'INRIA 
sur le site "http://www.cecill.info".

En contrepartie de l'accessibilité au code source et des droits de copie,
de modification et de redistribution accordés par cette licence, il n'est
offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
seule une responsabilité restreinte pèse sur l'auteur du programme,  le
titulaire des droits patrimoniaux et les concédants successifs.

A cet égard  l'attention de l'utilisateur est attirée sur les risques
associés au chargement,  à l'utilisation,  à la modification et/ou au
développement et à la reproduction du logiciel par l'utilisateur étant 
donné sa spécificité de logiciel libre, qui peut le rendre complexe à 
manipuler et qui le réserve donc à des développeurs et des professionnels
avertis possédant  des  connaissances  informatiques approfondies.  Les
utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
logiciel à leurs besoins dans des conditions permettant d'assurer la
sécurité de leurs systèmes et ou de leurs données et, plus généralement, 
à l'utiliser et l'exploiter dans les mêmes conditions de sécurité. 

Le fait que vous puissiez accéder à cet en-tête signifie que vous avez 
pris connaissance de la licence CeCILL-B, et que vous en avez accepté les
termes.
* ********************************************************************* */
package fr.ffessm.doris.android.datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.SelectArg;

import java.sql.SQLException;
import java.util.List;

import fr.ffessm.doris.android.datamodel.associations.*;

/** 
  * Fiche Doris, donne accés aux données de la fiche 
  */ 
@DatabaseTable(tableName = "fiche")
public class Fiche {

	public static final String XML_FICHE = "FICHE";
	public static final String XML_ATT_ID = "id";
	public static final String XML_ATT_NOMSCIENTIFIQUE = "nomScientifique";
	public static final String XML_ATT_NOMCOMMUN = "nomCommun";
	public static final String XML_ATT_NUMEROFICHE = "numeroFiche";
	public static final String XML_ATT_AUTRESDENOMINATIONS = "autresDenominations";
	
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;
	

	@DatabaseField
	protected java.lang.String nomScientifique;

	@DatabaseField
	protected java.lang.String nomCommun;

	/** Numéro de la fiche tel que connu par le site lui même */ 
	@DatabaseField
	protected int numeroFiche;

	@DatabaseField
	protected java.lang.String autresDenominations;
	

	@DatabaseField(foreign = true)
	protected Participant redacteurs;

	/** Liste des photos de la fiche */ 
	@ForeignCollectionField(eager = false, foreignFieldName = "fiche")
	protected ForeignCollection<PhotoFiche> photosFiche;

	/** zones géographiques où l'on peut trouver l'élément décrit par la fiche */ 
	public List<ZoneGeographique> lookupZonesGeographiques(DorisDBHelper contextDB) throws SQLException {
		if (zonesGeographiquesQuery == null) {
			zonesGeographiquesQuery = makeZonesGeographiquesQuery(contextDB);
		}
		zonesGeographiquesQuery.setArgumentHolderValue(0, this);
		return contextDB.zoneGeographiqueDao.query(zonesGeographiquesQuery);
	}
	private PreparedQuery<ZoneGeographique> zonesGeographiquesQuery = null;
	/**
	 * Build a query for ZoneGeographique objects that match a Fiche
	 */
	private PreparedQuery<ZoneGeographique> makeZonesGeographiquesQuery(DorisDBHelper contextDB) throws SQLException {
		// build our inner query for UserPost objects
		QueryBuilder<Fiches_ZonesGeographiques, Integer> fiches_ZonesGeographiquesQb = contextDB.fiches_ZonesGeographiquesDao.queryBuilder();
		// just select the post-id field
		fiches_ZonesGeographiquesQb.selectColumns(Fiches_ZonesGeographiques.ZONEGEOGRAPHIQUE_ID_FIELD_NAME);
		SelectArg userSelectArg = new SelectArg();
		// you could also just pass in user1 here
		fiches_ZonesGeographiquesQb.where().eq(Fiches_ZonesGeographiques.FICHE_ID_FIELD_NAME, userSelectArg);

		// build our outer query for Post objects
		QueryBuilder<ZoneGeographique, Integer> zoneGeographiqueQb = contextDB.zoneGeographiqueDao.queryBuilder();
		// where the id matches in the zoneGeographique-id from the inner query
		zoneGeographiqueQb.where().in("_id", fiches_ZonesGeographiquesQb);
		return zoneGeographiqueQb.prepare();
	}


				

	/** zones  où l'on peut observer l'élément décrit par la fiche */ 
	public List<ZoneObservation> lookupZonesObservation(DorisDBHelper contextDB) throws SQLException {
		if (zonesObservationQuery == null) {
			zonesObservationQuery = makeZonesObservationQuery(contextDB);
		}
		zonesObservationQuery.setArgumentHolderValue(0, this);
		return contextDB.zoneObservationDao.query(zonesObservationQuery);
	}
	private PreparedQuery<ZoneObservation> zonesObservationQuery = null;
	/**
	 * Build a query for ZoneObservation objects that match a Fiche
	 */
	private PreparedQuery<ZoneObservation> makeZonesObservationQuery(DorisDBHelper contextDB) throws SQLException {
		// build our inner query for UserPost objects
		QueryBuilder<Fiches_ZonesObservations, Integer> fiches_ZonesObservationsQb = contextDB.fiches_ZonesObservationsDao.queryBuilder();
		// just select the post-id field
		fiches_ZonesObservationsQb.selectColumns(Fiches_ZonesObservations.ZONEOBSERVATION_ID_FIELD_NAME);
		SelectArg userSelectArg = new SelectArg();
		// you could also just pass in user1 here
		fiches_ZonesObservationsQb.where().eq(Fiches_ZonesObservations.FICHE_ID_FIELD_NAME, userSelectArg);

		// build our outer query for Post objects
		QueryBuilder<ZoneObservation, Integer> zoneObservationQb = contextDB.zoneObservationDao.queryBuilder();
		// where the id matches in the zoneObservation-id from the inner query
		zoneObservationQb.where().in("_id", fiches_ZonesObservationsQb);
		return zoneObservationQb.prepare();
	}


				

	/** listes des personnes ayant vérifié la fiche */ 
	public List<Participant> lookupVerificateurs(DorisDBHelper contextDB) throws SQLException {
		if (verificateursQuery == null) {
			verificateursQuery = makeVerificateursQuery(contextDB);
		}
		verificateursQuery.setArgumentHolderValue(0, this);
		return contextDB.participantDao.query(verificateursQuery);
	}
	private PreparedQuery<Participant> verificateursQuery = null;
	/**
	 * Build a query for Participant objects that match a Fiche
	 */
	private PreparedQuery<Participant> makeVerificateursQuery(DorisDBHelper contextDB) throws SQLException {
		// build our inner query for UserPost objects
		QueryBuilder<Fiches_verificateurs_Participants, Integer> fiches_verificateurs_ParticipantsQb = contextDB.fiches_verificateurs_ParticipantsDao.queryBuilder();
		// just select the post-id field
		fiches_verificateurs_ParticipantsQb.selectColumns(Fiches_verificateurs_Participants.PARTICIPANT_ID_FIELD_NAME);
		SelectArg userSelectArg = new SelectArg();
		// you could also just pass in user1 here
		fiches_verificateurs_ParticipantsQb.where().eq(Fiches_verificateurs_Participants.FICHE_ID_FIELD_NAME, userSelectArg);

		// build our outer query for Post objects
		QueryBuilder<Participant, Integer> participantQb = contextDB.participantDao.queryBuilder();
		// where the id matches in the participant-id from the inner query
		participantQb.where().in("_id", fiches_verificateurs_ParticipantsQb);
		return participantQb.prepare();
	}


				

	/** responsable régional de la fiche */ 
	@DatabaseField(foreign = true)
	protected Participant responsableRegional;

	/** contenu textuel de la fiche */ 
	@ForeignCollectionField(eager = false, foreignFieldName = "fiche")
	protected ForeignCollection<SectionFiche> contenu;

	/** Photo par défaut de l'espèce présentée par cette fiche. Elle est aussi présente dans la liste "photosFiche". */ 
	@DatabaseField(foreign = true)
	protected PhotoFiche photoPrinicipale;

	// Start of user code Fiche additional user properties
	// End of user code
	
	public Fiche() {} // needed by ormlite
	public Fiche(java.lang.String nomScientifique, java.lang.String nomCommun, int numeroFiche, java.lang.String autresDenominations) {
		super();
		this.nomScientifique = nomScientifique;
		this.nomCommun = nomCommun;
		this.numeroFiche = numeroFiche;
		this.autresDenominations = autresDenominations;
	} 

	public int getId() {
		return _id;
	}
	public void setId(int id) {
		this._id = id;
	}

	public java.lang.String getNomScientifique() {
		return this.nomScientifique;
	}
	public void setNomScientifique(java.lang.String nomScientifique) {
		this.nomScientifique = nomScientifique;
	}
	public java.lang.String getNomCommun() {
		return this.nomCommun;
	}
	public void setNomCommun(java.lang.String nomCommun) {
		this.nomCommun = nomCommun;
	}
	public int getNumeroFiche() {
		return this.numeroFiche;
	}
	public void setNumeroFiche(int numeroFiche) {
		this.numeroFiche = numeroFiche;
	}
	public java.lang.String getAutresDenominations() {
		return this.autresDenominations;
	}
	public void setAutresDenominations(java.lang.String autresDenominations) {
		this.autresDenominations = autresDenominations;
	}

	public String toXML(){
		StringBuilder sb = new StringBuilder();
		sb.append("<");
    	sb.append(XML_FICHE);
		sb.append(" ");
    	sb.append(XML_ATT_ID);
    	sb.append("=\"");
		sb.append(this._id);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_NOMSCIENTIFIQUE);
    	sb.append("=\"");
		sb.append(this.nomScientifique);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_NOMCOMMUN);
    	sb.append("=\"");
		sb.append(this.nomCommun);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_NUMEROFICHE);
    	sb.append("=\"");
		sb.append(this.numeroFiche);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_AUTRESDENOMINATIONS);
    	sb.append("=\"");
		sb.append(this.autresDenominations);
    	sb.append("\" ");
    	sb.append(">");

		// TODO deal with other case

		sb.append("</");
    	sb.append(XML_FICHE);
    	sb.append(">");
		return sb.toString();
	}
}
