/* *********************************************************************
 * Licence CeCILL-B
 * *********************************************************************
 * Copyright (c) 2012-2013 - FFESSM
 * Auteurs : Guillaume Mo <gmo7942@gmail.com>
 *           Didier Vojtisek <dvojtise@gmail.com>
 * *********************************************************************

Ce logiciel est un programme informatique servant à afficher de manière 
ergonomique sur un terminal Android les fiches du site : doris.ffessm.fr. 

Les images, logos et textes restent la propriété de leurs auteurs, cf. : 
doris.ffessm.fr.

Ce logiciel est régi par la licence CeCILL-B soumise au droit français et
respectant les principes de diffusion des logiciels libres. Vous pouvez
utiliser, modifier et/ou redistribuer ce programme sous les conditions
de la licence CeCILL-B telle que diffusée par le CEA, le CNRS et l'INRIA 
sur le site "http://www.cecill.info".

En contrepartie de l'accessibilité au code source et des droits de copie,
de modification et de redistribution accordés par cette licence, il n'est
offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
seule une responsabilité restreinte pèse sur l'auteur du programme,  le
titulaire des droits patrimoniaux et les concédants successifs.

A cet égard  l'attention de l'utilisateur est attirée sur les risques
associés au chargement,  à l'utilisation,  à la modification et/ou au
développement et à la reproduction du logiciel par l'utilisateur étant 
donné sa spécificité de logiciel libre, qui peut le rendre complexe à 
manipuler et qui le réserve donc à des développeurs et des professionnels
avertis possédant  des  connaissances  informatiques approfondies.  Les
utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
logiciel à leurs besoins dans des conditions permettant d'assurer la
sécurité de leurs systèmes et ou de leurs données et, plus généralement, 
à l'utiliser et l'exploiter dans les mêmes conditions de sécurité. 

Le fait que vous puissiez accéder à cet en-tête signifie que vous avez 
pris connaissance de la licence CeCILL-B, et que vous en avez accepté les
termes.
* ********************************************************************* */
package fr.ffessm.doris.android.datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.SelectArg;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;

import org.apache.commons.lang3.StringEscapeUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import fr.ffessm.doris.android.datamodel.associations.*;

// Start of user code additional import for Fiche
import java.io.IOException;

import net.htmlparser.jericho.Attribute;
import net.htmlparser.jericho.Element;
import net.htmlparser.jericho.HTMLElementName;
import net.htmlparser.jericho.Source;

import fr.ffessm.doris.android.sitedoris.Constants;
import fr.ffessm.doris.android.sitedoris.Constants.ParticipantKind;
import fr.ffessm.doris.android.sitedoris.Outils;
import fr.ffessm.doris.android.sitedoris.SiteDoris;
// End of user code

/** 
  * Fiche Doris, donne accés aux données de la fiche 
  */ 
@DatabaseTable(tableName = "fiche")
public class Fiche {

	public static Log log = LogFactory.getLog(Fiche.class);

	public static final String XML_FICHE = "FICHE";
	public static final String XML_ATT_ID = "id";
	public static final String XML_ATT_NOMSCIENTIFIQUE = "nomScientifique";
	public static final String XML_ATT_NOMCOMMUN = "nomCommun";
	public static final String XML_ATT_NUMEROFICHE = "numeroFiche";
	public static final String XML_ATT_ETATFICHE = "etatFiche";
	public static final String XML_ATT_DATECREATION = "dateCreation";
	public static final String XML_ATT_DATEMODIFICATION = "dateModification";
	public static final String XML_ATT_NUMEROFICHESLIEES = "numerofichesLiees";
	public static final String XML_ATT_TEXTEPOURRECHERCHERAPIDE = "textePourRechercheRapide";
	public static final String XML_REF_REDACTEURS = "redacteurs";
	public static final String XML_REF_PHOTOSFICHE = "photosFiche";
	public static final String XML_REF_ZONESGEOGRAPHIQUES = "zonesGeographiques";
	public static final String XML_REF_ZONESOBSERVATION = "zonesObservation";
	public static final String XML_REF_VERIFICATEURS = "verificateurs";
	public static final String XML_REF_RESPONSABLEREGIONAL = "responsableRegional";
	public static final String XML_REF_CONTENU = "contenu";
	public static final String XML_REF_PHOTOPRINCIPALE = "photoPrincipale";
	public static final String XML_REF_AUTRESDENOMINATIONS = "autresDenominations";
	public static final String XML_REF_GROUPE = "groupe";
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;

	/**
     * dbHelper used to autorefresh values and doing queries
     * must be set other wise most getter will return proxy that will need to be refreshed
	 */
	protected DorisDBHelper _contextDB = null;

	/**
	 * object created from DB may need to be updated from the DB for being fully navigable
	 */
	public boolean redacteurs_mayNeedDBRefresh = true;
	public boolean verificateurs_mayNeedDBRefresh = true;
	public boolean responsableRegional_mayNeedDBRefresh = true;
	public boolean photoPrincipale_mayNeedDBRefresh = true;
	public boolean groupe_mayNeedDBRefresh = true;
	

	@DatabaseField
	protected java.lang.String nomScientifique;

	@DatabaseField
	protected java.lang.String nomCommun;

	/** Numéro de la fiche tel que connu par le site lui même */ 
	@DatabaseField
	protected int numeroFiche;

	/** Etat Avancement de la fiche 
4 : Fiche Publiée - 1, 2, 3 : En cours de Rédaction - 5 : Fiche Proposée */ 
	@DatabaseField
	protected int etatFiche;

	@DatabaseField
	protected java.lang.String dateCreation;

	@DatabaseField
	protected java.lang.String dateModification;

	/** numéros des fiches liées séparé par des point virgules */ 
	@DatabaseField
	protected java.lang.String numerofichesLiees;

	/** Texte précalculé pour optimiser les recherches (sans accents, sans majuscules) avec autres dénominations */ 
	@DatabaseField(dataType = com.j256.ormlite.field.DataType.LONG_STRING)
	protected java.lang.String textePourRechercheRapide;
	

	@DatabaseField(foreign = true)
	protected Participant redacteurs;

	/** Liste des photos de la fiche */ 
	@ForeignCollectionField(eager = false, foreignFieldName = "fiche")
	protected ForeignCollection<PhotoFiche> photosFiche;

	/** zones géographiques où l'on peut trouver l'élément décrit par la fiche */ 
	// work in progress, find association 
	// Association many to many Fiches_ZonesGeographiques
	@ForeignCollectionField(eager = false, foreignFieldName = "fiche")	
	protected ForeignCollection<Fiches_ZonesGeographiques> fiches_ZonesGeographiques;

	/** zones géographiques où l'on peut trouver l'élément décrit par la fiche 
	  * Attention, returned list is readonly
      */
	public List<ZoneGeographique> getZonesGeographiques(){
		List<ZoneGeographique> result = new ArrayList<ZoneGeographique>();
		
		for (Fiches_ZonesGeographiques aFiches_ZonesGeographiques : fiches_ZonesGeographiques) {
			if(_contextDB != null) aFiches_ZonesGeographiques.setContextDB(_contextDB);
			result.add(aFiches_ZonesGeographiques.getZoneGeographique());
		}
		return result;
	}
	public void addZoneGeographique(ZoneGeographique zoneGeographique){
		try {
			_contextDB.fiches_ZonesGeographiquesDao.create(new Fiches_ZonesGeographiques( zoneGeographique, this));		
		} catch (SQLException e) {
			log.error("Pb while adding association fiches_ZonesGeographiques",e);
		}
	}
	// end work in progress 	

				

	/** zones  où l'on peut observer l'élément décrit par la fiche */ 
	@ForeignCollectionField(eager = false, foreignFieldName = "fiches")
	protected ForeignCollection<ZoneObservation> zonesObservation;

	/** listes des personnes ayant vérifié la fiche */ 
	@DatabaseField(foreign = true) //, columnName = USER_ID_FIELD_NAME)
	protected Participant verificateurs;

	/** responsable régional de la fiche */ 
	@DatabaseField(foreign = true)
	protected Participant responsableRegional;

	/** contenu textuel de la fiche */ 
	@ForeignCollectionField(eager = false, foreignFieldName = "fiche")
	protected ForeignCollection<SectionFiche> contenu;

	/** Photo par défaut de l'espèce présentée par cette fiche. Elle est aussi présente dans la liste "photosFiche". */ 
	@DatabaseField(foreign = true)
	protected PhotoFiche photoPrincipale;

	/** Liste des autres dénominations de l'espèce présentée sur la fiche. */ 
	@ForeignCollectionField(eager = false, foreignFieldName = "fiche")
	protected ForeignCollection<AutreDenomination> autresDenominations;

	/** Permet d'identifier avec le sous-groupe (optionel) le groupe auquel est rattaché la fiche */ 
	@DatabaseField(foreign = true)
	protected Groupe groupe;

	// Start of user code Fiche additional user properties
	
	public String getAutreDenominationTxt(){
		StringBuilder sbAutreDenominations = new StringBuilder();
		Collection<AutreDenomination> listeAutreDenominations = getAutresDenominations();
		
		for (AutreDenomination autreDenomination:listeAutreDenominations) {
			sbAutreDenominations.append(autreDenomination.denomination+" ");
		}
		
		return sbAutreDenominations.toString().trim();
	}
	
	
	
	public void getFicheFromHtml(String htmlFiche, List<Groupe> listeGroupes) throws SQLException{
		log.trace("getFiche() - Début");
		
    	int i;
    	StringBuilder sbListeLiensVersFiches = new StringBuilder();
    	
    	htmlFiche = Outils.nettoyageBalises(htmlFiche);
    	
    	
    	try {
			htmlFiche = Outils.ciblePage(htmlFiche, "FICHE");
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
    	
    	
    	//log.debug("getFiche() - htmlFiche : " + htmlFiche.substring(0, 200));
    	
		// Utilisation du parser Jericho
		Source source=new Source(htmlFiche);
		
		// Necessaire pour trouver ensuite les pères
		source.fullSequentialParse();

		// Recherche TD dont la class est code_fiche
		// Il contient le code fiche, le nom français, le nom latin et la zone géographique
		Element ElementTDcode_fiche;
		ElementTDcode_fiche = source.getFirstElementByClass("code_fiche");
		
		//log.debug("getFiche() - ElementTDcode_fiche.toString() : " + ElementTDcode_fiche.toString());

		String ficheRef = ElementTDcode_fiche.getFirstElementByClass("normalgris").getRenderer().toString().trim();
		ficheRef = ficheRef.replace("(N°", "").replace(")", "");
		setNumeroFiche(Integer.parseInt(ficheRef));
		log.info("getFiche() - ref : " + ficheRef);		
				
		//Centrage sur la TABLE qui contient tout le texte et les images
		Element ElementTable;
		List<? extends Element> listeElementsTable_TABLE;
		List<? extends Attribute> listeAttributs;
		int num_table = 0;
		int groupeRef = 0;
		int sousgroupeRef = 0;
		
		// Lecture des informations pour une fiche complète
		if ( getEtatFiche() == 4) {
		
			
			//Recup de l'ensemble des lignes (TR) de la TABLE
			// La 1ère contient l'entête
			// La 2ème contient la description
			// La 4ème contient la classification et la suite
			
			ElementTable=source.getFirstElementByClass("trait_cadregris").getFirstElement();
			//log.debug("getFiche() - ElementTable : " + ElementTable.toString().substring(0, Math.min(ElementTable.toString().length(),200)));
			
			listeElementsTable_TABLE = ElementTable.getFirstElement(HTMLElementName.TABLE).getChildElements();
			//log.debug("getFiche() - listeElementsTable_TABLE.size : " + listeElementsTable_TABLE.size());

			for (Element elementTable_TABLE : listeElementsTable_TABLE) {
				num_table++;
				//log.debug("getFiche() - ligneTable_TR :" + num_table);
				//log.debug("getFiche() - elementTable_TR : " + elementTable_TABLE.toString().substring(0, Math.min(elementTable_TABLE.toString().length(),100)));
				switch(num_table) {
				//Entête de la Fiche
				case 1 :
					//Recup du TD qui contient les infos Haut Gauche
					List<? extends Element> listeElementsHG_TD = elementTable_TABLE.getAllElementsByClass("code_fiche");
					
					for (Element element : listeElementsHG_TD) {
						List<? extends Element> listeElementsHG_TR = element.getAllElements(HTMLElementName.TR);
						i = 0;
						for (Element elementTR : listeElementsHG_TR) {
							i++;
							if (i == 1) {
								//TODO: pour chaque img contenu on a un petit logo indiquant si l'espèce est protégée, réglementée, dangeureuse
								List<? extends Element> listeElementsTR_IMG = elementTR.getAllElements(HTMLElementName.IMG);
								for (Element elementImg : listeElementsTR_IMG) {
									log.info("getFiche() - ficheTagInfo : " + elementImg.getAttributeValue("alt")+" + "+elementImg.getAttributeValue("src"));
								}
							}
							if (i == 2) {
								log.info("getFiche() - ficheNomLatin : " + elementTR.getRenderer().toString());
								setNomScientifique( Outils.nettoyageCaracteres(elementTR.getRenderer().toString().trim()) );
							}
							if (i == 3) {
								log.info("getFiche() - ficheRegion : " + elementTR.getRenderer().toString());
								// TODO :
								//ficheRegion = elementTR.getRenderer().toString().trim();
							}
							if (i == 5) {
								log.info("getFiche() - ficheNomFrancais : " + elementTR.getRenderer().toString());
								setNomCommun( Outils.nettoyageCaracteres(elementTR.getRenderer().toString().trim()) );
							}
						}
					}
					
					//Recup TRs Haut Droit contenant le Groupe auquel appartient l'espèce
					List<? extends Element> listeElementsIMG = elementTable_TABLE.getAllElements(HTMLElementName.IMG);
					for (Element element : listeElementsIMG) {
						listeAttributs=element.getAttributes();
						for (Attribute attribut : listeAttributs) {
							
							if (attribut.getName().equals("src") && attribut.getValue().toString().startsWith("gestionenligne/images_groupe/") ) {
								// Certaines fiches appartiennent à un groupe sans être dans un sous-groupe
								// c'est pourquoi, on initialise d'abord le groupe
								groupeRef = Integer.parseInt(attribut.getValue().toString().replaceAll(".*images_groupe/([0-9]*).gif","$1"));
								log.info("getFiche() - groupeRef : " + groupeRef);

								groupe = SiteDoris.getGroupeFromListeGroupes(listeGroupes, groupeRef, 0);
							}
						}
					}

					
					
					break;
				//Description Gauche et Droite
				case 2 :
					
					//Le grand pere du 1er TD de class Normal est le TBODY des Détails
					Element ElementsMG_normal=elementTable_TABLE.getFirstElementByClass("normal");
					//log.debug("getFiche() - ElementsMG_rubrique : " + ElementsMG_normal.toString().substring(0, Math.min(ElementsMG_normal.toString().length(),20)));
					Element ElementsMG=ElementsMG_normal.getParentElement().getParentElement();
					List<? extends Element> listeElementsMG_TD = ElementsMG.getAllElements(HTMLElementName.TD);

					boolean autresDenominationsFlag = true;
					String rubrique = "";
	
					for (Element elementTD : listeElementsMG_TD) {
						//log.debug("getFiche() - listeElementsMG_TD : " + elementTD.toString().substring(0, Math.min(elementTD.toString().length(),50)));
						listeAttributs=elementTD.getAttributes();
						for (Attribute attribut : listeAttributs) {
							// Récupération du Titre de la rubrique
							// Le titre est vide pour "Autres Dénominations"
							if (attribut.getName().equals("class") && attribut.getValue().equals("rubrique")) {
								rubrique = elementTD.getRenderer().toString().trim();
								
								//Si c'est la 1ère fois que l'on passe par "rubrique" alors 
								// c'est que l'on a déjà passé les autres dénomination et que donc on les connait
								if (!rubrique.equals("") && autresDenominationsFlag) {
									autresDenominationsFlag = false;
								}
								rubrique = elementTD.getRenderer().toString().trim();
							}
							
							if (attribut.getName().equals("class") && attribut.getValue().equals("normal") ) {
								log.debug("getFiche() - rubrique : " + rubrique);
								if (autresDenominationsFlag) {
									String autresDenominationsTexte  = elementTD.getRenderer().toString().trim();
									
									// suppression des sauts de ligne
									autresDenominationsTexte = autresDenominationsTexte.replaceAll("\r\n", " ").replaceAll("\n", " ");
									log.debug("getFiche() - autresDenominations(B1) : " + autresDenominationsTexte);
	
									// suppression des blancs multiples
									autresDenominationsTexte = autresDenominationsTexte.replaceAll("\\s{2,}"," ");
									log.debug("getFiche() - autresDenominations(B2) : " + autresDenominationsTexte);
									
									// permet d'enlever les Liens et de les remplacer par un texte, par exemple "(Fiche)"
									autresDenominationsTexte = autresDenominationsTexte.replaceAll("<[^>]*>", Constants.getContenuLienTexte()).trim();
										
									AutreDenomination autreDenomination = new AutreDenomination(autresDenominationsTexte, "");									
									autreDenomination.setFiche(this);
									_contextDB.autreDenominationDao.create(autreDenomination);
									
									
								} else {
									String contenuTexte = elementTD.getRenderer().toString();
									//log.debug("getFiche() - contenu(initial) : " + contenu);
									
									// suppression des sauts de ligne
									contenuTexte = contenuTexte.replaceAll("\r\n", " ").replaceAll("\n", " ");
									//log.debug("getFiche() - contenu(1) : " + contenuTexte);
	
									// suppression des blancs multiples
									contenuTexte = contenuTexte.replaceAll("\\s{2,}"," ");
									//log.debug("getFiche() - contenu(2) : " + contenuTexte);
									
									// permet d'enlever les Liens et de les remplacer par (*)
									contenuTexte = contenuTexte.replaceAll("<[^>]*>", Constants.getContenuLienTexte()).trim();
	
									log.info("getFiche() - rubrique : " + rubrique);
									log.info("getFiche() - contenu(après nettoyage) : " + contenuTexte);
									
									SectionFiche contenu = new SectionFiche(rubrique, contenuTexte);
									contenu.setFiche(this);
									_contextDB.sectionFicheDao.create(contenu);
								}
							}
						}
						
						// Création de la liste des Liens (url vers d'autres fiches)
						
						for (Element elementTDA : elementTD.getAllElements(HTMLElementName.A)) {
							String hrefValue = elementTDA.getAttributeValue("href");
							log.debug("getFiche() - A : " + elementTDA.getRenderer().toString().trim() + " - lien : " + hrefValue);
							
							if (hrefValue != null && (hrefValue.startsWith("../") || hrefValue.startsWith("http://doris.ffessm.fr")) ) {
							
								if (elementTDA.getAttributeValue("href").replaceAll(".*fiche_numero=", "") != "" && elementTDA.getRenderer().toString().trim() != "") {
								
									String tempLien = elementTDA.getAttributeValue("href").replaceAll(".*fiche_numero=", "");
									
									if (!sbListeLiensVersFiches.toString().contains(tempLien + ";")) {
										sbListeLiensVersFiches.append(tempLien + ";");
									}
									log.info("getFiche() - listeLienRencontre : " + sbListeLiensVersFiches.toString() );
								}
							}
						}
					}
					
					
					
					//Recup du TD qui contient les infos DROITE (images et qui a fait la fiche)
					//Recup du TR dont le 3ème TD fils contient les infos DROITE (images et qui a fait la fiche)
					List<? extends Element> listeElementsEntoureDeGris = elementTable_TABLE.getAllElementsByClass("trait_cadregris");
					//log.debug("getFiche() -  element : " + " - " + elementTable_TABLE.toString().substring(0, Math.min(elementTable_TABLE.toString().length(),30)));
					
					for (Element elementEntoureDeGris : listeElementsEntoureDeGris) {
						//log.debug("getFiche() - vignette 1: " + elementEntoureDeGris.toString().substring(0, Math.min(100,elementEntoureDeGris.toString().toString().length())));
						
						// Les images de la fiche sont dans les liens (A)
						/*
						Element elementAinEntoureDeGris= elementEntoureDeGris.getFirstElement(HTMLElementName.A);
						Element elementImg = null;
						String urlImageDansFiche = "";
						
						if (elementAinEntoureDeGris != null)
						{
							elementImg = elementAinEntoureDeGris.getFirstElement(HTMLElementName.IMG);
							log.debug("getFiche() - vignette 2: " + elementImg.toString().substring(0, Math.min(100,elementImg.toString().toString().length())));
							
							listeAttributs=elementImg.getAttributes();
							for (Attribute attribut : listeAttributs) {
								if (attribut.getName().equalsIgnoreCase("src") && attribut.getValue().contains("gestionenligne")){
									urlImageDansFiche = attribut.getValue().replaceAll(Constants.getSiteUrl(), "");
									log.debug("getFiche() - urlImageDansFiche : " + urlImageDansFiche);
									break;
								}

							}
						}*/
						
					// Devenue inutile avec recherche des photos par la page de prévisualisation
					/*

						if (elementImg != null) {
							//Recup Texte
							Element elementImgTexte = elementEntoureDeGris.getFirstElementByClass("normal2");
							if (elementImgTexte != null)
							{
								log.info("getFiche() - Texte : " + elementImgTexte.getRenderer().toString());
								// TODO :
								// ficheListeImages.add(new Image(element2.getRenderer().toString(),urlImageDansFiche));
							}
						}
					*/
					
					
						// Les participants
						// On vérifie que le cadre Gris contient la rubrique Participants
						Element elementRubriqueinEntoureDeGris= elementEntoureDeGris.getFirstElementByClass("rubrique");
						if (elementRubriqueinEntoureDeGris != null) {
							log.debug("getFiche() - 520 - "+elementRubriqueinEntoureDeGris.getRenderer().toString());
							if (elementRubriqueinEntoureDeGris.getRenderer().toString().trim().equals("Participants")) {
								// On parcourt les TD
								// Si class=gris_gras et contenu texte != vide => qualité de la personne ci-après
								// Si class=normal et contenu texte != vide => nom de la personne
								// TODO : Si class=normal et contenu texte = vide  et Contient <A> => 
								//    ref de la personne = echo href | grep "s/.*contact_numero=(.*)/$1/"
								ParticipantKind intervenantQualite = null;
								String intervenantRef = null;
								
								String listeParticipantsTexteBrute = elementRubriqueinEntoureDeGris.getParentElement().getParentElement().getFirstElement(HTMLElementName.TABLE).getRenderer().toString();
								//log.debug("getFiche() - 525 - "+listeParticipantsTexteBrute);
				
								String[] listeParticipantsTexte = listeParticipantsTexteBrute.split("\n");
								//log.debug("getFiche() - 530 - "+listeParticipantsTexte.length);
								
								for (String ligne : listeParticipantsTexte) {
									//log.debug("getFiche() - 535 - "+ligne.trim());
									
									if ( Constants.getTypeParticipant(ligne.trim()) != null ){
										intervenantQualite = Constants.getTypeParticipant(ligne.trim() );
										log.debug("getFiche() - Type Intervenant: " + intervenantQualite);
									}
									
									if ( ligne.trim().contains("contact_numero=") ){
										intervenantRef = ligne.trim().replaceAll(".*contact_fiche.*contact_numero=(.*)>", "$1");
										log.debug("getFiche() - Ref Intervenant: " + intervenantRef);
										
										// TODO : C'est ici qu'il faudra ajouter la MAJ de la Base
									}
									
								}
							}
						}
										
					} // Fin parcourt des Cadres Gris
					
					// Les dates de Créations et de nodifications
					// Elles sont dans le seul TD de class = normalgris
					Element ElementDates=elementTable_TABLE.getFirstElementByClass("normalgris");
					//log.info("getFiche() - Bloc Dates : " + ElementDates.getRenderer().toString());
					
					dateCreation = ElementDates.getRenderer().toString().replaceAll("Création le : ([^ ]*).*", "$1").trim();
					dateModification = ElementDates.getRenderer().toString().replaceAll(".*modification le(.*)", "$1").trim();
					log.debug("getFiche() - dateCreation : " + dateCreation);
					log.debug("getFiche() - dateModification : " + dateModification);
					break; // Fin de la recherche d'infos dans le bloc principal
					
				//Ligne blanche => rien à faire mais à garder pour ne pas passer dans le default
				case 3 :
					break;
					
				//la classification et la suite
				case 4 :
					// To Do
					break;
				default :
					break;
				}
			}
			
			//Recup du sous-Groupe auquel appartient l'espèce
			List<? extends Element> listeElementsTDSousGroupe = source.getAllElementsByClass("sousgroupe_fiche");
			for (Element element : listeElementsTDSousGroupe) {
				int index = listeElementsTDSousGroupe.indexOf(element);
				log.debug("getFiche() - index : " + index);
				
				if (index == 1) {					
					// Texte du sous-groupe (inutile pour nous)
				}
				if (index == 2) {
					
					listeAttributs = element.getFirstElement(HTMLElementName.IMG).getAttributes();
					for (Attribute attribut : listeAttributs) {
						
						if (attribut.getName().equals("src") && attribut.getValue().toString().startsWith("gestionenligne/images_sousgroupe/") ) {
							// Certaines fiches appartiennent à un groupe sans être dans un sous-groupe
							// c'est pourquoi, on a d'abord initialiser les groupes
							// et qu'on l'écrase ici. (on a l'arborescence des groupes par ailleurs)
							sousgroupeRef = Integer.parseInt(attribut.getValue().toString().toLowerCase().replaceAll(".*images_sousgroupe/([0-9]*).(gif|jpg)","$1"));
							log.info("getFiche() - sousgroupeRef : " + sousgroupeRef);

							groupe = SiteDoris.getGroupeFromListeGroupes(listeGroupes, groupeRef, sousgroupeRef);
							
						}
					}
				}
			}

			
		}
		
		
		//Lecture des informations pour une fiche proposée et pour le début d'une fiche en cours de rédaction
		if ( getEtatFiche() == 1 || getEtatFiche() == 2 || getEtatFiche() == 3
				|| getEtatFiche() == 5 ) {
			ElementTable=source.getFirstElementByClass("trait_cadregris");
			//log.debug("getFiche() - ElementTable : " + ElementTable.toString().substring(0, Math.min(ElementTable.toString().length(),200)));

			listeElementsTable_TABLE = ElementTable.getAllElements(HTMLElementName.TABLE);
			//log.debug("getFiche() - listeElementsTable_TABLE.size : " + listeElementsTable_TABLE.size());

			for (Element elementTable_TABLE : listeElementsTable_TABLE) {
				num_table++;
				//log.debug("getFiche() - num_table :" + num_table);
				//log.debug("getFiche() - elementTable_TABLE.length() : " + elementTable_TABLE.toString().length());
				//log.debug("getFiche() - elementTable_TABLE : " + elementTable_TABLE.toString().substring(0, Math.min(elementTable_TABLE.toString().length(),100)));

				String largeurTable = elementTable_TABLE.getAttributeValue("width");
				//log.debug("getFiche() - largeurTable :" + largeurTable);
				String urlImageDansFiche = "";
				
				//Entête de la Fiche
				if (num_table== 2) {
			
					Element ElementInfosGauche = elementTable_TABLE.getFirstElementByClass("code_fiche").getFirstElement();
					
					try	{
						Element ElementNomLatin = ElementInfosGauche.getFirstElementByClass("texte_bandeau").getFirstElement();
						log.info("getFiche() - ElementNomLatin : " + ElementNomLatin.getRenderer().toString().trim());
						setNomScientifique( ElementNomLatin.getRenderer().toString().trim() );
					} catch (Exception e) {
		        		log.debug("getFiche() - le nom latin n'est pas toujours renseigné");
		        	}
					
					try	{
						Element ElementDistribution = ElementInfosGauche.getFirstElementByClass("normal").getFirstElement();
						log.info("getFiche() - ElementDistribution : " + ElementDistribution.getRenderer().toString().trim());
						// TODO :
						//ficheRegion = ElementDistribution.getRenderer().toString().trim();
					} catch (Exception e) {
		        		log.debug("getFiche() - la Distribution n'est pas toujours renseignée");
		        	}
					
					try	{
						Element ElementNomCommun = ElementInfosGauche.getFirstElementByClass("titre2").getFirstElement();
						log.info("getFiche() - ElementNomCommun : " + ElementNomCommun.getRenderer().toString().trim());
						setNomCommun( ElementNomCommun.getRenderer().toString().trim() );
					} catch (Exception e) {
		        		log.debug("getFiche() - le nom français n'est pas toujours renseigné");
		        	}
					
					//Recup TRs Haut Droit contenant le Groupe auquel appartient l'espèce
					List<? extends Element> listeElementsIMG = elementTable_TABLE.getAllElements(HTMLElementName.IMG);
					for (Element element : listeElementsIMG) {
						listeAttributs=element.getAttributes();
						for (Attribute attribut : listeAttributs) {
							
							if (attribut.getName().equals("src") && attribut.getValue().toString().startsWith("gestionenligne/images_groupe/") ) {

								groupeRef = Integer.parseInt(attribut.getValue().toString().replaceAll(".*images_groupe/([0-9]*).gif","$1"));
								log.info("getFiche() - groupeRef : " + groupeRef);

								groupe = SiteDoris.getGroupeFromListeGroupes(listeGroupes, groupeRef, 0);

							}
						}
					}

								
				}
					
				if (largeurTable!=null && largeurTable.equals("372")) {
					//log.debug("getFiche() - Recup. Images");
					
					//Recup du TR dont le 3ème TD fils contient les infos DROITE (images et qui a fait la fiche)
					List<? extends Element> ListeelementTable_IMG = elementTable_TABLE.getAllElements(HTMLElementName.IMG);
					
					for (Element elementTableImg : ListeelementTable_IMG) {
						List<? extends Attribute> listeAttributsTableImg=elementTableImg.getAttributes();
						for (Attribute attribut : listeAttributsTableImg) {
							if (attribut.getName().equalsIgnoreCase("src") && attribut.getValue().contains("gestionenligne")){
								// TODO :
								//urlImageDansFiche = attribut.getValue().replaceAll(Constants.getSiteUrl(), "");
								//log.info("getFiche() - urlImageDansFiche : " + urlImageDansFiche);
														
								break;
							}
							
						}
					}
						
					//Recup Texte Image
					/*
					Element element2 = elementTable_TABLE.getFirstElementByClass("normal2");
					if (element2 != null)
					{
						log.info("getFiche() - Texte : " + element2.getRenderer().toString());
						// TODO :
						// ficheListeImages.add(new Image(element2.getRenderer().toString(), urlImageDansFiche));
					}*/
					break;
			
				}

			}
			
			//Recup du sous-Groupe auquel appartient l'espèce
			//log.debug("getFiche() - Recup du sous-Groupe auquel appartient l'espèce");
			List<? extends Element> listeElementsTDSousGroupe = source.getAllElementsByClass("sousgroupe_fiche");
			
			for (Element element : listeElementsTDSousGroupe) {
				int index = listeElementsTDSousGroupe.indexOf(element);
				//log.debug("getFiche() - index : " + index);
				
				if (index == 1) {
				}
				if (index == 2) {
					
					listeAttributs = element.getFirstElement(HTMLElementName.IMG).getAttributes();
					for (Attribute attribut : listeAttributs) {
						
						if (attribut.getName().equals("src") && attribut.getValue().toString().startsWith("gestionenligne/images_sousgroupe/") ) {
							sousgroupeRef = Integer.parseInt(attribut.getValue().toString().toLowerCase().replaceAll(".*images_sousgroupe/([0-9]*).(gif|jpg)","$1"));
							log.info("getFiche() - sousgroupeRef : " + sousgroupeRef);

							groupe = SiteDoris.getGroupeFromListeGroupes(listeGroupes, groupeRef, sousgroupeRef);
						}
					}
				}
			}
			
			
		}
		
		if (sbListeLiensVersFiches.length() !=0){
			setNumerofichesLiees(sbListeLiensVersFiches.toString());									
		}
		
		StringBuilder sbTextePourRechercheRapide = new StringBuilder(getNomCommun());
		sbTextePourRechercheRapide.append(getNomScientifique());
		sbTextePourRechercheRapide.append(getAutreDenominationTxt());
		setTextePourRechercheRapide(Outils.formatStringNormalizer(sbTextePourRechercheRapide.toString()).toLowerCase());
		
		listeElementsTable_TABLE = null;
		
    	log.trace("getFiche() - Fin");
	}
	
	
	public class Detail {

		public String titre;
		public String contenu;
		public boolean affiche;
		
		public Detail(String inTitre, String inContenu, boolean inAffiche) {
			log.trace("Detail() - Début");
			log.debug("Detail() - Titre : " + inTitre);
			log.debug("Detail() - Contenu : " + inContenu);
			log.debug("Detail() - Affiche : " + inAffiche);
			titre = inTitre;
			contenu = inContenu;
			affiche = inAffiche;
			log.trace("Detail() - Fin");
		}
	}
	
	public class Image {

		public String titre;
		public boolean principale;
		public String urlVignette;
		public String urlImage;
		
		public Image(String inTitre, String inUrl) {
			log.debug("Image() - Début");
			log.debug("Image() - Titre : " + inTitre);
			log.debug("Image() - Url : " + inUrl);

			titre = inTitre;
			
			//Les remplacements si dessous permettent de "calculer" simplement la référence de la grande image
			urlImage = inUrl.replace("/photos_fiche_moy/","/photos/").replace("/photos_fiche_vig/","/photos/");
			//ou de la vignette
			urlVignette = inUrl.replace("/photos_fiche_moy/","/photos_fiche_vig/");
			
			//Si c'est l'image principale alors c'est l'image : photos_fiche_moy
			if (inUrl.contains("/photos_fiche_moy/")) {
				principale = true;
			}else {
				principale = false;
			}
			
			log.debug("Image() - principale : " + principale);
			log.debug("Image() - urlImage : " + urlImage);
			log.debug("Image() - urlVignette : " + urlVignette);
			log.debug("Image() - Fin");
		}
		
	}
	
	/**
	 * @return liste des numeroFiche des fiches liées
	 */
	public List<Integer> getNumerosFicheLiees(){
		ArrayList<Integer> result = new ArrayList<Integer>();
		for(String  s : this.numerofichesLiees.split(";")){
			if (!s.isEmpty()) result.add(Integer.parseInt(s));
		}
		return result;
	}
	
	
	// End of user code
	
	public Fiche() {} // needed by ormlite
	public Fiche(java.lang.String nomScientifique, java.lang.String nomCommun, int numeroFiche, int etatFiche, java.lang.String dateCreation, java.lang.String dateModification, java.lang.String numerofichesLiees, java.lang.String textePourRechercheRapide) {
		super();
		this.nomScientifique = nomScientifique;
		this.nomCommun = nomCommun;
		this.numeroFiche = numeroFiche;
		this.etatFiche = etatFiche;
		this.dateCreation = dateCreation;
		this.dateModification = dateModification;
		this.numerofichesLiees = numerofichesLiees;
		this.textePourRechercheRapide = textePourRechercheRapide;
	} 

	public int getId() {
		return _id;
	}
	public void setId(int id) {
		this._id = id;
	}

	public DorisDBHelper getContextDB(){
		return _contextDB;
	}
	public void setContextDB(DorisDBHelper contextDB){
		this._contextDB = contextDB;
	}

	public java.lang.String getNomScientifique() {
		return this.nomScientifique;
	}
	public void setNomScientifique(java.lang.String nomScientifique) {
		this.nomScientifique = nomScientifique;
	}
	public java.lang.String getNomCommun() {
		return this.nomCommun;
	}
	public void setNomCommun(java.lang.String nomCommun) {
		this.nomCommun = nomCommun;
	}
	public int getNumeroFiche() {
		return this.numeroFiche;
	}
	public void setNumeroFiche(int numeroFiche) {
		this.numeroFiche = numeroFiche;
	}
	public int getEtatFiche() {
		return this.etatFiche;
	}
	public void setEtatFiche(int etatFiche) {
		this.etatFiche = etatFiche;
	}
	public java.lang.String getDateCreation() {
		return this.dateCreation;
	}
	public void setDateCreation(java.lang.String dateCreation) {
		this.dateCreation = dateCreation;
	}
	public java.lang.String getDateModification() {
		return this.dateModification;
	}
	public void setDateModification(java.lang.String dateModification) {
		this.dateModification = dateModification;
	}
	public java.lang.String getNumerofichesLiees() {
		return this.numerofichesLiees;
	}
	public void setNumerofichesLiees(java.lang.String numerofichesLiees) {
		this.numerofichesLiees = numerofichesLiees;
	}
	public java.lang.String getTextePourRechercheRapide() {
		return this.textePourRechercheRapide;
	}
	public void setTextePourRechercheRapide(java.lang.String textePourRechercheRapide) {
		this.textePourRechercheRapide = textePourRechercheRapide;
	}

	public Participant getRedacteurs() {
		try {
			if(redacteurs_mayNeedDBRefresh && _contextDB != null){
				_contextDB.participantDao.refresh(this.redacteurs);
				redacteurs_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error(e.getMessage(),e);
		}
		if(_contextDB==null && this.redacteurs == null){
			log.warn("Fiche may not be properly refreshed from DB (_id="+_id+")");
		}
		return this.redacteurs;
	}
	public void setRedacteurs(Participant redacteurs) {
		this.redacteurs = redacteurs;
	}			
	/** Liste des photos de la fiche */
	public Collection<PhotoFiche> getPhotosFiche() {
		return this.photosFiche;
	}					
	/** zones  où l'on peut observer l'élément décrit par la fiche */
	public Collection<ZoneObservation> getZonesObservation() {
		return this.zonesObservation;
	}					
	/** listes des personnes ayant vérifié la fiche */ 
	public Participant getVerificateurs() {
		try {
			if(verificateurs_mayNeedDBRefresh && _contextDB != null){
				_contextDB.participantDao.refresh(this.verificateurs);
				verificateurs_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error(e.getMessage(),e);
		}
		if(_contextDB==null && this.verificateurs == null){
			log.warn("Fiche may not be properly refreshed from DB (_id="+_id+")");
		}
		return this.verificateurs;
	}
	public void setVerificateurs(Participant verificateurs) {
		this.verificateurs = verificateurs;
	}			
	/** responsable régional de la fiche */ 
	public Participant getResponsableRegional() {
		try {
			if(responsableRegional_mayNeedDBRefresh && _contextDB != null){
				_contextDB.participantDao.refresh(this.responsableRegional);
				responsableRegional_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error(e.getMessage(),e);
		}
		if(_contextDB==null && this.responsableRegional == null){
			log.warn("Fiche may not be properly refreshed from DB (_id="+_id+")");
		}
		return this.responsableRegional;
	}
	public void setResponsableRegional(Participant responsableRegional) {
		this.responsableRegional = responsableRegional;
	}			
	/** contenu textuel de la fiche */
	public Collection<SectionFiche> getContenu() {
		return this.contenu;
	}					
	/** Photo par défaut de l'espèce présentée par cette fiche. Elle est aussi présente dans la liste "photosFiche". */ 
	public PhotoFiche getPhotoPrincipale() {
		try {
			if(photoPrincipale_mayNeedDBRefresh && _contextDB != null){
				_contextDB.photoFicheDao.refresh(this.photoPrincipale);
				photoPrincipale_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error(e.getMessage(),e);
		}
		if(_contextDB==null && this.photoPrincipale == null){
			log.warn("Fiche may not be properly refreshed from DB (_id="+_id+")");
		}
		return this.photoPrincipale;
	}
	public void setPhotoPrincipale(PhotoFiche photoPrincipale) {
		this.photoPrincipale = photoPrincipale;
	}			
	/** Liste des autres dénominations de l'espèce présentée sur la fiche. */
	public Collection<AutreDenomination> getAutresDenominations() {
		return this.autresDenominations;
	}					
	/** Permet d'identifier avec le sous-groupe (optionel) le groupe auquel est rattaché la fiche */ 
	public Groupe getGroupe() {
		try {
			if(groupe_mayNeedDBRefresh && _contextDB != null){
				_contextDB.groupeDao.refresh(this.groupe);
				groupe_mayNeedDBRefresh = false;
			}
		} catch (SQLException e) {
			log.error(e.getMessage(),e);
		}
		if(_contextDB==null && this.groupe == null){
			log.warn("Fiche may not be properly refreshed from DB (_id="+_id+")");
		}
		return this.groupe;
	}
	public void setGroupe(Groupe groupe) {
		this.groupe = groupe;
	}			



	public String toXML(String indent, DorisDBHelper contextDB){
		StringBuilder sb = new StringBuilder();
		sb.append(indent+"<");
    	sb.append(XML_FICHE);
		sb.append(" "+XML_ATT_ID+"=\"");
		sb.append(this._id);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_NOMSCIENTIFIQUE);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.nomScientifique));
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_NOMCOMMUN);
    	sb.append("=\"");
		sb.append(StringEscapeUtils.escapeXml(this.nomCommun));
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_NUMEROFICHE);
    	sb.append("=\"");
		sb.append(this.numeroFiche);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_ETATFICHE);
    	sb.append("=\"");
		sb.append(this.etatFiche);
    	sb.append("\" ");
    	sb.append(">");

		sb.append("\n"+indent+"\t<"+XML_ATT_DATECREATION+">");
		sb.append(StringEscapeUtils.escapeXml(this.dateCreation));
    	sb.append("</"+XML_ATT_DATECREATION+">");
		sb.append("\n"+indent+"\t<"+XML_ATT_DATEMODIFICATION+">");
		sb.append(StringEscapeUtils.escapeXml(this.dateModification));
    	sb.append("</"+XML_ATT_DATEMODIFICATION+">");
		sb.append("\n"+indent+"\t<"+XML_ATT_NUMEROFICHESLIEES+">");
		sb.append(StringEscapeUtils.escapeXml(this.numerofichesLiees));
    	sb.append("</"+XML_ATT_NUMEROFICHESLIEES+">");
		sb.append("\n"+indent+"\t<"+XML_ATT_TEXTEPOURRECHERCHERAPIDE+">");
		sb.append(StringEscapeUtils.escapeXml(this.textePourRechercheRapide));
    	sb.append("</"+XML_ATT_TEXTEPOURRECHERCHERAPIDE+">");

		if(this.redacteurs!= null){
			sb.append("\n"+indent+"\t<"+XML_REF_REDACTEURS+">");
			sb.append(this.redacteurs.getId());
	    	sb.append("</"+XML_REF_REDACTEURS+">");
		}
		sb.append("\n"+indent+"\t<"+XML_REF_PHOTOSFICHE+">");
		if(this.photosFiche != null){
			for(PhotoFiche ref : this.photosFiche){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_PHOTOSFICHE+">");		
		
		for(ZoneGeographique ref : this.getZonesGeographiques()){
    		sb.append("\n"+indent+"\t<"+XML_REF_ZONESGEOGRAPHIQUES+" id=\"");
    		sb.append(ref._id);
        	sb.append("\"/>");
			
    	}
			
		if(this.zonesObservation != null){
			for(ZoneObservation ref : this.zonesObservation){
					
	    		sb.append("\n"+indent+"\t<"+XML_REF_ZONESOBSERVATION+" id=\"");
	    		sb.append(ref._id);
	        	sb.append("\"/>");
	    	}		
		}
		if(this.verificateurs!= null){
			sb.append("\n"+indent+"\t<"+XML_REF_VERIFICATEURS+">");
			sb.append(this.verificateurs.getId());
	    	sb.append("</"+XML_REF_VERIFICATEURS+">");
		}
		if(this.responsableRegional!= null){
			sb.append("\n"+indent+"\t<"+XML_REF_RESPONSABLEREGIONAL+">");
			sb.append(this.responsableRegional.getId());
	    	sb.append("</"+XML_REF_RESPONSABLEREGIONAL+">");
		}
		sb.append("\n"+indent+"\t<"+XML_REF_CONTENU+">");
		if(this.contenu != null){
			for(SectionFiche ref : this.contenu){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_CONTENU+">");		
		if(this.photoPrincipale!= null){
			sb.append("\n"+indent+"\t<"+XML_REF_PHOTOPRINCIPALE+">");
			sb.append(this.photoPrincipale.getId());
	    	sb.append("</"+XML_REF_PHOTOPRINCIPALE+">");
		}
		sb.append("\n"+indent+"\t<"+XML_REF_AUTRESDENOMINATIONS+">");
		if(this.autresDenominations != null){
			for(AutreDenomination ref : this.autresDenominations){
				sb.append("\n"+ref.toXML(indent+"\t\t", contextDB));
	    	}
		}
		sb.append("</"+XML_REF_AUTRESDENOMINATIONS+">");		
		if(this.groupe!= null){
			sb.append("\n"+indent+"\t<"+XML_REF_GROUPE+">");
			sb.append(this.groupe.getId());
	    	sb.append("</"+XML_REF_GROUPE+">");
		}
		// TODO deal with other case

		sb.append("</"+XML_FICHE+">");
		return sb.toString();
	}
}
