
/*******************************************************************************
 * Copyright (c) 2012 Vojtisek.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Didier Vojtisek - initial API and implementation
 *******************************************************************************/
package fr.ffessm.doris.android.datamodel;

import com.j256.ormlite.dao.ForeignCollection;
import com.j256.ormlite.field.DatabaseField;
import com.j256.ormlite.field.ForeignCollectionField;
import com.j256.ormlite.table.DatabaseTable;
import com.j256.ormlite.stmt.PreparedQuery;
import com.j256.ormlite.stmt.QueryBuilder;
import com.j256.ormlite.stmt.SelectArg;

import java.sql.SQLException;
import java.util.List;

import fr.ffessm.doris.android.datamodel.associations.*;

/** 
  *  
  */ 
@DatabaseTable(tableName = "zoneGeographique")
public class ZoneGeographique {

	public static final String XML_ZONEGEOGRAPHIQUE = "ZONEGEOGRAPHIQUE";
	public static final String XML_ATT_ID = "id";
	public static final String XML_ATT_NOM = "nom";
	
	// id is generated by the database and set on the object automagically
	@DatabaseField(generatedId = true)
	protected int _id;
	

	@DatabaseField
	protected java.lang.String nom;
	

	public List<Fiche> lookupFiches(DorisDBHelper contextDB) throws SQLException {
		if (fichesQuery == null) {
			fichesQuery = makeFichesQuery(contextDB);
		}
		fichesQuery.setArgumentHolderValue(0, this);
		return contextDB.ficheDao.query(fichesQuery);
	}
	private PreparedQuery<Fiche> fichesQuery = null;
	/**
	 * Build a query for Fiche objects that match a ZoneGeographique
	 */
	private PreparedQuery<Fiche> makeFichesQuery(DorisDBHelper contextDB) throws SQLException {
		// build our inner query for UserPost objects
		QueryBuilder<Fiches_ZonesGeographiques, Integer> fiches_ZonesGeographiquesQb = contextDB.fiches_ZonesGeographiquesDao.queryBuilder();
		// just select the post-id field
		fiches_ZonesGeographiquesQb.selectColumns(Fiches_ZonesGeographiques.FICHE_ID_FIELD_NAME);
		SelectArg userSelectArg = new SelectArg();
		// you could also just pass in user1 here
		fiches_ZonesGeographiquesQb.where().eq(Fiches_ZonesGeographiques.ZONEGEOGRAPHIQUE_ID_FIELD_NAME, userSelectArg);

		// build our outer query for Post objects
		QueryBuilder<Fiche, Integer> ficheQb = contextDB.ficheDao.queryBuilder();
		// where the id matches in the fiche-id from the inner query
		ficheQb.where().in("_id", fiches_ZonesGeographiquesQb);
		return ficheQb.prepare();
	}


				

	// Start of user code ZoneGeographique additional user properties
	// End of user code
	
	public ZoneGeographique() {} // needed by ormlite
	public ZoneGeographique(java.lang.String nom) {
		super();
		this.nom = nom;
	} 

	public int getId() {
		return _id;
	}
	public void setId(int id) {
		this._id = id;
	}

	public java.lang.String getNom() {
		return this.nom;
	}
	public void setNom(java.lang.String nom) {
		this.nom = nom;
	}

	public String toXML(){
		StringBuilder sb = new StringBuilder();
		sb.append("<");
    	sb.append(XML_ZONEGEOGRAPHIQUE);
		sb.append(" ");
    	sb.append(XML_ATT_ID);
    	sb.append("=\"");
		sb.append(this._id);
    	sb.append("\" ");
		sb.append(" ");
    	sb.append(XML_ATT_NOM);
    	sb.append("=\"");
		sb.append(this.nom);
    	sb.append("\" ");
    	sb.append(">");

		// TODO deal with other case

		sb.append("</");
    	sb.append(XML_ZONEGEOGRAPHIQUE);
    	sb.append(">");
		return sb.toString();
	}
}
