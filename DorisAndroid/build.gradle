apply plugin: 'com.android.application'

dependencies {
    // a terme on devrait remplacer cela vers des ref dans les repo maven correspondants
    compile fileTree(dir: 'libs',
            include: '*.jar',
            exclude: 'DorisAndroidCommon.jar, ormlite-core*, commons-lang3*')
    // dependances maven
    compile 'com.j256.ormlite:ormlite-core:4.47'
    compile 'com.j256.ormlite:ormlite-android:4.47'
    compile 'org.apache.commons:commons-lang3:3.1'

    // dependances Android
    compile 'com.android.support:appcompat-v7:19.1.0'
    compile 'com.android.support:support-v4:19.1.0'    
    // NOTE la version 21+ ne fonctionne pas bien, Ã  revoir ...
    //compile 'com.android.support:appcompat-v7:21.0.3'
    //compile project(':android-support-v7-appcompat')

    // dependances inter-projets
    compile project(':GenandroidLib')
    compile project(':DorisAndroidCommon')
}

repositories {
    mavenCentral()
}

android {
    compileSdkVersion 21
    buildToolsVersion '23.0.3'

    defaultConfig {
        minSdkVersion 10
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }

        // Move the tests to tests/java, tests/res, etc...
        instrumentTest.setRoot('tests')

        // Move the build types to build-types/<type>
        // For instance, build-types/debug/java, build-types/debug/AndroidManifest.xml, ...
        // This moves them out of them default location under src/<type>/... which would
        // conflict with src/ being used by the main source set.
        // Adding new build types or product flavors should be accompanied
        // by a similar customization.
        debug.setRoot('build-types/debug')
        release.setRoot('build-types/release')
    }
	
	File signFile = file('/builds/keystore/sign.properties')
	if (signFile.exists()) {
		println 'found sign.properties!'
		Properties p = new Properties()
		p.load(new FileInputStream(signFile))
		signingConfigs {
			releaseConfig {
				storeFile file(p.storeFile)
				storePassword p.storePassword
				keyAlias p.keyAlias
				keyPassword p.keyPassword
			}
		}
		buildTypes.release.signingConfig signingConfigs.releaseConfig
	}
	else{
		println 'sign.properties not found'
	}

    lintOptions {
        // Don't abort if Lint finds an error, otherwise the Jenkins build
        // will be marked as failed, and Jenkins won't analyse the Lint output
        abortOnError false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }
}
